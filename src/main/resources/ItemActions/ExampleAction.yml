ExampleItem2:
  # 左键触发
  left:
    # 动作内容
    actions:
      # 这条动作没有condition, 所以必定执行
      - "tell: 你正尝试触发&e ExampleItem2 &f物品"
      # 当前这条动作的执行条件
      - condition: perm("item.ExampleItem2")
        # 满足条件后执行的动作
        actions:
          # 后台执行
          - "console: say &e%player_name% &f拥有&e item.ExampleItem2 &f权限"
          # 玩家执行
          - "command: say 我拥有&e item.ExampleItem2 &f权限"
        # 不满足条件时执行的动作
        deny:
          - "tell: 你没有&e item.ExampleItem2 &f权限"
    # 一句话概括: 不想看的话, 优先使用"sync", 别用"actions"
    #
    # 从实际功能而言, “sync”与"actions"没有区别.
    # 区别在于, "sync"下的所有内容都是同步解析, 同步触发的
    #
    # 即: 所有非线程安全的行为都应该在"sync"下进行
    # 比如: 检测玩家是否拥有某个物品, 然后通过指令扣除
    # 模拟情境: 你将A物品配置为"满足 papi("%checkitem_amount_mat:stone%") >= 1 时, 扣除一个石头, 给予100元"
    #          如果你将这些动作配置到"actions"下, 那么可能出现:
    #          判断玩家确实拥有大于等于1个石头, 然后玩家将石头丢出背包
    #          后面扣除石头时, 因为玩家没有足够的石头, 扣除操作相当于失效
    #          之后给予100元的行为却仍然执行, 玩家就成功在不消耗石头的情况下获得了100元
    #          因此这些行为应该配置于"sync"下, 而非"actions"
    #
    # 注: "sync"下所有动作同步触发, 但这不代表"actions"下所有内容异步触发.
    #     所有基础物品动作都作了相关判断, 比如takeHealth, takeFood, takeLevel等行为,
    #     都会挪到主线程实施, 避免出现线程安全问题
    sync:
      - "tell: 你好, 这条消息通过主线程发送"
ExampleItem3:
  # 左键触发
  left:
    # 冷却时间(单位是ms)
    cooldown: 3000
    # 冷却组, 同一冷却组的物品共享冷却时间
    group: test2
    # 消耗选项
    consume:
      # 物品消耗条件
      condition: perm("item.ExampleItem3")
      # 每次消耗物品数量
      amount: 1
      # 不满足条件时执行的动作
      deny:
        - "tell: 你没有&e item.ExampleItem3 &f权限"
    # 动作内容
    sync:
      # 这条动作没有condition, 所以必定执行
      - "tell: 你正尝试触发&e ExampleItem3 &f物品"
ExampleItem4:
  all:
    consume:
      amount: 1
    sync:
      - 'console: say He''s name is %player_name%'
      - 'command: say My name is %player_name%'
ActionTest:
  all:
    sync:
      # 检测test1这条NBT的值是否等于"666"
      condition: parseItem("<nbt::test1>") == "666"
      actions:
        - 'console: say 名为test1的NBT的值为: <nbt::test1>'
        - 'console: say 名为test2.test3的NBT的值为: <nbt::test2.test3>'
        - 'console: say 名为test的节点的值为: <data::test>'
        - 'console: say 随机数尝试: <number::0_10_2>'
EatTest1:
  eat:
    sync:
      - 'give-food: 5'
      - 'give-health: 5'
EatTest2:
  eat:
    consume:
      amount: 1
    sync:
      - 'give-food: 5'
      - 'give-health: 5'
DropTest1:
  drop:
    sync:
      - 'cast-skill: SkillTest'
DropTest2:
  drop:
    consume:
      amount: 1
    sync:
      - 'cast-skill: SkillTest'
CustomAction:
  all:
    sync:
      - test
ComboTest:
  left:
    cooldown: 10
    sync:
      # 在ComboTest组记录, 触发了类型为left的连击
      - "combo: ComboTest left"
      # 检测ComboTest组是否完成了left-right-left连击
      - condition: combo("ComboTest", ["left", "right", "left"])
        actions:
          # 进行对应操作
          - 'tell: &e连击 &bL &f+ &bR &f+ &bL'
          # 已达成最终需要的连击, 清空ComboTest组的连击记录
          - 'combo-clear: ComboTest'
        deny:
          # 检测ComboTest组是否完成了left连击
          condition: combo("ComboTest", ["left"])
          actions:
            # 进行对应操作
            - 'tell: &e连击 &bL'
  right:
    cooldown: 10
    sync:
      # 在ComboTest组记录, 触发了类型为right的连击
      - "combo: ComboTest right"
      # 检测ComboTest组是否完成了left-right连击
      - condition: combo("ComboTest", ["left", "right"])
        actions:
          # 进行对应操作
          - 'tell: &e连击 &bL &f+ &bR'